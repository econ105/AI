# Install and load required packages
install.packages("neuralnet")
library(neuralnet)

# Create sample dataset
set.seed(123)
n <- 100
IQ <- rnorm(n, mean = 100, sd = 15)
EQ <- rnorm(n, mean = 50, sd = 10)
study_hours <- rnorm(n, mean = 20, sd = 5)
GPA <- 0.5 * IQ / 100 + 0.3 * EQ / 50 + 0.2 * study_hours / 20 + rnorm(n, mean = 0, sd = 0.1)
data <- data.frame(IQ, EQ, study_hours, GPA)

# Normalize data
normalize <- function(x) (x - min(x)) / (max(x) - min(x))
data_normalized <- as.data.frame(lapply(data, normalize))

# Split data into training and testing sets
set.seed(123)
index <- sample(1:nrow(data_normalized), 0.8 * nrow(data_normalized))
train_data <- data_normalized[index, ]
test_data <- data_normalized[-index, ]

# Train neural network
formula <- GPA ~ IQ + EQ + study_hours
nn <- neuralnet(formula, data = train_data, hidden = c(5, 3), linear.output = TRUE)

# Make predictions
predictions <- compute(nn, test_data[, 1:3])
denormalize <- function(x, original) x * (max(original) - min(original)) + min(original)
predicted_GPA <- denormalize(predictions$net.result, data$GPA)
actual_GPA <- denormalize(test_data$GPA, data$GPA)

# Evaluate model
mse <- mean((actual_GPA - predicted_GPA)^2)
cat("Mean Squared Error:", mse, "\n")
plot(actual_GPA, predicted_GPA, main = "Actual vs Predicted GPA", xlab = "Actual GPA", ylab = "Predicted GPA")
abline(0, 1, col = "red")

# Visualize neural network
plot(nn)
