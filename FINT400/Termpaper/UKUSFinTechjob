{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/econ105/AI/blob/main/FINT400/Termpaper/UKUSFinTechjob\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qc_BeN5ZpbaK",
        "outputId": "21b16df5-8b9a-454d-af28-816693e5a587"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: wordcloud in /usr/local/lib/python3.11/dist-packages (1.9.4)\n",
            "Requirement already satisfied: nltk in /usr/local/lib/python3.11/dist-packages (3.9.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.15.2)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk) (8.1.8)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.11/dist-packages (from nltk) (2024.11.6)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from nltk) (4.67.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
          ]
        }
      ],
      "source": [
        "pip install pandas numpy matplotlib seaborn scikit-learn wordcloud nltk"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "wl99FiyqphIJ",
        "outputId": "1543fadf-ae3e-4202-8d28-d06b4940a744"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading collection 'all'\n",
            "[nltk_data]    | \n",
            "[nltk_data]    | Downloading package abc to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/abc.zip.\n",
            "[nltk_data]    | Downloading package alpino to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/alpino.zip.\n",
            "[nltk_data]    | Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping taggers/averaged_perceptron_tagger.zip.\n",
            "[nltk_data]    | Downloading package averaged_perceptron_tagger_eng to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping\n",
            "[nltk_data]    |       taggers/averaged_perceptron_tagger_eng.zip.\n",
            "[nltk_data]    | Downloading package averaged_perceptron_tagger_ru to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping\n",
            "[nltk_data]    |       taggers/averaged_perceptron_tagger_ru.zip.\n",
            "[nltk_data]    | Downloading package averaged_perceptron_tagger_rus to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping\n",
            "[nltk_data]    |       taggers/averaged_perceptron_tagger_rus.zip.\n",
            "[nltk_data]    | Downloading package basque_grammars to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping grammars/basque_grammars.zip.\n",
            "[nltk_data]    | Downloading package bcp47 to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package biocreative_ppi to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/biocreative_ppi.zip.\n",
            "[nltk_data]    | Downloading package bllip_wsj_no_aux to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping models/bllip_wsj_no_aux.zip.\n",
            "[nltk_data]    | Downloading package book_grammars to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping grammars/book_grammars.zip.\n",
            "[nltk_data]    | Downloading package brown to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/brown.zip.\n",
            "[nltk_data]    | Downloading package brown_tei to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/brown_tei.zip.\n",
            "[nltk_data]    | Downloading package cess_cat to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/cess_cat.zip.\n",
            "[nltk_data]    | Downloading package cess_esp to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/cess_esp.zip.\n",
            "[nltk_data]    | Downloading package chat80 to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/chat80.zip.\n",
            "[nltk_data]    | Downloading package city_database to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/city_database.zip.\n",
            "[nltk_data]    | Downloading package cmudict to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/cmudict.zip.\n",
            "[nltk_data]    | Downloading package comparative_sentences to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/comparative_sentences.zip.\n",
            "[nltk_data]    | Downloading package comtrans to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package conll2000 to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/conll2000.zip.\n",
            "[nltk_data]    | Downloading package conll2002 to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/conll2002.zip.\n",
            "[nltk_data]    | Downloading package conll2007 to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package crubadan to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/crubadan.zip.\n",
            "[nltk_data]    | Downloading package dependency_treebank to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/dependency_treebank.zip.\n",
            "[nltk_data]    | Downloading package dolch to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/dolch.zip.\n",
            "[nltk_data]    | Downloading package english_wordnet to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/english_wordnet.zip.\n",
            "[nltk_data]    | Downloading package europarl_raw to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/europarl_raw.zip.\n",
            "[nltk_data]    | Downloading package extended_omw to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    | Downloading package floresta to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/floresta.zip.\n",
            "[nltk_data]    | Downloading package framenet_v15 to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/framenet_v15.zip.\n",
            "[nltk_data]    | Downloading package framenet_v17 to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/framenet_v17.zip.\n",
            "[nltk_data]    | Downloading package gazetteers to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/gazetteers.zip.\n",
            "[nltk_data]    | Downloading package genesis to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/genesis.zip.\n",
            "[nltk_data]    | Downloading package gutenberg to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/gutenberg.zip.\n",
            "[nltk_data]    | Downloading package ieer to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/ieer.zip.\n",
            "[nltk_data]    | Downloading package inaugural to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/inaugural.zip.\n",
            "[nltk_data]    | Downloading package indian to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/indian.zip.\n",
            "[nltk_data]    | Downloading package jeita to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package kimmo to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/kimmo.zip.\n",
            "[nltk_data]    | Downloading package knbc to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package large_grammars to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping grammars/large_grammars.zip.\n",
            "[nltk_data]    | Downloading package lin_thesaurus to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/lin_thesaurus.zip.\n",
            "[nltk_data]    | Downloading package mac_morpho to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/mac_morpho.zip.\n",
            "[nltk_data]    | Downloading package machado to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package masc_tagged to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package maxent_ne_chunker to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping chunkers/maxent_ne_chunker.zip.\n",
            "[nltk_data]    | Downloading package maxent_ne_chunker_tab to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping chunkers/maxent_ne_chunker_tab.zip.\n",
            "[nltk_data]    | Downloading package maxent_treebank_pos_tagger to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping taggers/maxent_treebank_pos_tagger.zip.\n",
            "[nltk_data]    | Downloading package maxent_treebank_pos_tagger_tab to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping\n",
            "[nltk_data]    |       taggers/maxent_treebank_pos_tagger_tab.zip.\n",
            "[nltk_data]    | Downloading package moses_sample to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping models/moses_sample.zip.\n",
            "[nltk_data]    | Downloading package movie_reviews to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/movie_reviews.zip.\n",
            "[nltk_data]    | Downloading package mte_teip5 to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/mte_teip5.zip.\n",
            "[nltk_data]    | Downloading package mwa_ppdb to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping misc/mwa_ppdb.zip.\n",
            "[nltk_data]    | Downloading package names to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/names.zip.\n",
            "[nltk_data]    | Downloading package nombank.1.0 to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package nonbreaking_prefixes to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/nonbreaking_prefixes.zip.\n",
            "[nltk_data]    | Downloading package nps_chat to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/nps_chat.zip.\n",
            "[nltk_data]    | Downloading package omw to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package omw-1.4 to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package opinion_lexicon to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/opinion_lexicon.zip.\n",
            "[nltk_data]    | Downloading package panlex_swadesh to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    | Downloading package paradigms to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/paradigms.zip.\n",
            "[nltk_data]    | Downloading package pe08 to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/pe08.zip.\n",
            "[nltk_data]    | Downloading package perluniprops to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping misc/perluniprops.zip.\n",
            "[nltk_data]    | Downloading package pil to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/pil.zip.\n",
            "[nltk_data]    | Downloading package pl196x to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/pl196x.zip.\n",
            "[nltk_data]    | Downloading package porter_test to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping stemmers/porter_test.zip.\n",
            "[nltk_data]    | Downloading package ppattach to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/ppattach.zip.\n",
            "[nltk_data]    | Downloading package problem_reports to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/problem_reports.zip.\n",
            "[nltk_data]    | Downloading package product_reviews_1 to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/product_reviews_1.zip.\n",
            "[nltk_data]    | Downloading package product_reviews_2 to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/product_reviews_2.zip.\n",
            "[nltk_data]    | Downloading package propbank to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package pros_cons to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/pros_cons.zip.\n",
            "[nltk_data]    | Downloading package ptb to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/ptb.zip.\n",
            "[nltk_data]    | Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping tokenizers/punkt.zip.\n",
            "[nltk_data]    | Downloading package punkt_tab to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping tokenizers/punkt_tab.zip.\n",
            "[nltk_data]    | Downloading package qc to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/qc.zip.\n",
            "[nltk_data]    | Downloading package reuters to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package rslp to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping stemmers/rslp.zip.\n",
            "[nltk_data]    | Downloading package rte to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/rte.zip.\n",
            "[nltk_data]    | Downloading package sample_grammars to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping grammars/sample_grammars.zip.\n",
            "[nltk_data]    | Downloading package semcor to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package senseval to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/senseval.zip.\n",
            "[nltk_data]    | Downloading package sentence_polarity to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/sentence_polarity.zip.\n",
            "[nltk_data]    | Downloading package sentiwordnet to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/sentiwordnet.zip.\n",
            "[nltk_data]    | Downloading package shakespeare to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/shakespeare.zip.\n",
            "[nltk_data]    | Downloading package sinica_treebank to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/sinica_treebank.zip.\n",
            "[nltk_data]    | Downloading package smultron to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/smultron.zip.\n",
            "[nltk_data]    | Downloading package snowball_data to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    | Downloading package spanish_grammars to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping grammars/spanish_grammars.zip.\n",
            "[nltk_data]    | Downloading package state_union to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/state_union.zip.\n",
            "[nltk_data]    | Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/stopwords.zip.\n",
            "[nltk_data]    | Downloading package subjectivity to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/subjectivity.zip.\n",
            "[nltk_data]    | Downloading package swadesh to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/swadesh.zip.\n",
            "[nltk_data]    | Downloading package switchboard to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/switchboard.zip.\n",
            "[nltk_data]    | Downloading package tagsets to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping help/tagsets.zip.\n",
            "[nltk_data]    | Downloading package tagsets_json to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping help/tagsets_json.zip.\n",
            "[nltk_data]    | Downloading package timit to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/timit.zip.\n",
            "[nltk_data]    | Downloading package toolbox to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/toolbox.zip.\n",
            "[nltk_data]    | Downloading package treebank to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/treebank.zip.\n",
            "[nltk_data]    | Downloading package twitter_samples to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/twitter_samples.zip.\n",
            "[nltk_data]    | Downloading package udhr to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/udhr.zip.\n",
            "[nltk_data]    | Downloading package udhr2 to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/udhr2.zip.\n",
            "[nltk_data]    | Downloading package unicode_samples to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/unicode_samples.zip.\n",
            "[nltk_data]    | Downloading package universal_tagset to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping taggers/universal_tagset.zip.\n",
            "[nltk_data]    | Downloading package universal_treebanks_v20 to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    | Downloading package vader_lexicon to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    | Downloading package verbnet to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/verbnet.zip.\n",
            "[nltk_data]    | Downloading package verbnet3 to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/verbnet3.zip.\n",
            "[nltk_data]    | Downloading package webtext to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/webtext.zip.\n",
            "[nltk_data]    | Downloading package wmt15_eval to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping models/wmt15_eval.zip.\n",
            "[nltk_data]    | Downloading package word2vec_sample to\n",
            "[nltk_data]    |     /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping models/word2vec_sample.zip.\n",
            "[nltk_data]    | Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package wordnet2021 to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package wordnet2022 to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/wordnet2022.zip.\n",
            "[nltk_data]    | Downloading package wordnet31 to /root/nltk_data...\n",
            "[nltk_data]    | Downloading package wordnet_ic to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/wordnet_ic.zip.\n",
            "[nltk_data]    | Downloading package words to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/words.zip.\n",
            "[nltk_data]    | Downloading package ycoe to /root/nltk_data...\n",
            "[nltk_data]    |   Unzipping corpora/ycoe.zip.\n",
            "[nltk_data]    | \n",
            "[nltk_data]  Done downloading collection all\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "import nltk\n",
        "nltk.download('all', halt_on_error=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UqFuLUGBpTUP"
      },
      "outputs": [],
      "source": [
        "#Data preprocessing\n",
        "\n",
        "import re\n",
        "import pandas as pd\n",
        "from wordcloud import WordCloud\n",
        "import matplotlib.pyplot as plt\n",
        "import nltk\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "from nltk.corpus import wordnet\n",
        "\n",
        "# --- Download required NLTK resources ---\n",
        "nltk.download('punkt')\n",
        "nltk.download('wordnet')\n",
        "nltk.download('omw-1.4')\n",
        "\n",
        "# --- Load dataset ---\n",
        "df = pd.read_csv('/content/uk_fintech.csv')\n",
        "\n",
        "# --- Initialize lemmatizer ---\n",
        "lemmatizer = WordNetLemmatizer()\n",
        "\n",
        "# --- Define base form verbs commonly used in job responsibilities ---\n",
        "common_verbs = [\n",
        "    'act', 'ask', 'assess', 'attend', 'be', 'establish', 'deliver', 'design', 'document', 'drive',\n",
        "    'engage', 'ensure', 'create', 'begin', 'build', 'collaborate', 'collect', 'comfort', 'conduct',\n",
        "    'contribute', 'gather', 'generate', 'help', 'make', 'identify', 'improve', 'interact', 'leverage',\n",
        "    'assist', 'analyze', 'communicate', 'coordinate', 'develop', 'execute', 'handle',\n",
        "    'implement', 'lead', 'maintain', 'manage', 'monitor', 'operate', 'oversee', 'perform',\n",
        "    'present', 'support', 'write', 'work', 'vision', 'verify', 'valid', 'utilize', 'use',\n",
        "    'understand', 'translate', 'train', 'track', 'take', 'solve', 'review', 'research',\n",
        "    'represent', 'prepare'\n",
        "]\n",
        "\n",
        "# --- Helper: Check if a sentence starts with a verb ---\n",
        "def is_starting_with_verb(sentence):\n",
        "    words = re.findall(r'\\b\\w+\\b', sentence.lower())\n",
        "    if not words:\n",
        "        return False\n",
        "    return lemmatizer.lemmatize(words[0], pos='v') in common_verbs\n",
        "\n",
        "# --- Requirement identification keywords ---\n",
        "requirement_keywords = [\n",
        "    r'bachelor', r'master', r'degree', r'diploma', r'certification',\n",
        "    r'\\d+ years?', r'experience in', r'proficiency in', r'knowledge of',\n",
        "    r'familiarity with', r'ability to', r'skills in', r'strong \\w+ skills',\n",
        "    r'expertise in', r'background in', r'qualification', r'licen[cs]e',\n",
        "    r'certified', r'understanding of', r'proven ability', r'track record',\n",
        "    r'proficient in', r'competent in'\n",
        "]\n",
        "\n",
        "# --- Helper: Check if a sentence contains requirement keywords ---\n",
        "def contains_requirement_keywords(sentence):\n",
        "    return any(re.search(keyword, sentence, re.IGNORECASE) for keyword in requirement_keywords)\n",
        "\n",
        "# --- Main processing function ---\n",
        "def process_row(row):\n",
        "    # Safely fetch and concatenate fields\n",
        "    text_res = str(row.get('responsibilities', '') or '')\n",
        "    text_req = str(row.get('requirement', '') or '')\n",
        "    combined_text = f\"{text_res}\\n{text_req}\"\n",
        "\n",
        "    # Sentence splitting using line breaks and punctuation\n",
        "    sentences = re.split(r'[\\n\\.]+', combined_text)\n",
        "    cleaned_sentences = []\n",
        "\n",
        "    for sentence in sentences:\n",
        "        sentence = sentence.strip()\n",
        "        if not sentence:\n",
        "            continue\n",
        "        # Remove leading 'nan' if present\n",
        "        sentence = re.sub(r'^nan[\\s:,-]*', '', sentence, flags=re.IGNORECASE).strip()\n",
        "        if sentence:\n",
        "            cleaned_sentences.append(sentence)\n",
        "\n",
        "    responsibilities = []\n",
        "    requirements = []\n",
        "\n",
        "    for sentence in cleaned_sentences:\n",
        "        if contains_requirement_keywords(sentence):\n",
        "            requirements.append(sentence)\n",
        "        elif is_starting_with_verb(sentence):\n",
        "            responsibilities.append(sentence)\n",
        "        # Else: discard\n",
        "\n",
        "    # Reassign cleaned text\n",
        "    row['responsibilities'] = \"\\n\".join(responsibilities)\n",
        "    row['requirement'] = \"\\n\".join(requirements)\n",
        "    return row\n",
        "\n",
        "# --- Apply processing to DataFrame ---\n",
        "df = df.apply(process_row, axis=1)\n",
        "\n",
        "# --- Save cleaned data ---\n",
        "output_path = '/content/uk_fintech_cleaned.xlsx'\n",
        "df.to_excel(output_path, index=False)\n",
        "\n",
        "print(f\"Cleaned file saved to: {output_path}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cj5GZisBpqAI"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.decomposition import PCA\n",
        "from collections import Counter\n",
        "import re\n",
        "from wordcloud import WordCloud\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize\n",
        "\n",
        "def download_nltk_resources():\n",
        "    \"\"\"Download required NLTK resources\"\"\"\n",
        "    try:\n",
        "        nltk.data.find('tokenizers/punkt')\n",
        "    except LookupError:\n",
        "        nltk.download('punkt')\n",
        "\n",
        "    try:\n",
        "        nltk.data.find('corpora/stopwords')\n",
        "    except LookupError:\n",
        "        nltk.download('stopwords')\n",
        "\n",
        "# Download required NLTK resources\n",
        "download_nltk_resources()\n",
        "\n",
        "# Set up stopwords\n",
        "stop_words = set(stopwords.words('english'))\n",
        "custom_stopwords = {'fintech', 'job', 'role', 'skills', 'experience', 'required',\n",
        "    'responsible', 'including', 'ability', 'knowledge', 'using', 'etc',\n",
        "    'team', 'data', 'business', 'work'}\n",
        "stop_words.update(custom_stopwords)\n",
        "\n",
        "def load_and_preprocess(filepath, country):\n",
        "    \"\"\"Load and preprocess real estate job data\"\"\"\n",
        "    df = pd.read_csv(filepath)\n",
        "    df['country'] = country\n",
        "\n",
        "    # Standardize text columns\n",
        "    text_columns = []\n",
        "    if 'responsibilities' in df.columns:\n",
        "        text_columns.append('responsibilities')\n",
        "    if 'requirement' in df.columns:\n",
        "        text_columns.append('requirement')\n",
        "\n",
        "    for col in text_columns:\n",
        "        df[col] = df[col].astype(str).str.lower().fillna('')\n",
        "\n",
        "    return df\n",
        "\n",
        "def extract_certifications(text):\n",
        "    \"\"\"Extract common real estate certifications\"\"\"\n",
        "    certifications = {\n",
        "        'cfa': ['cfa', 'chartered financial analyst'],\n",
        "        'frm': ['frm', 'financial risk manager'],\n",
        "        'cpa': ['cpa', 'certified public accountant'],\n",
        "        'cambridge': ['cambridge fintech', 'cambridge certificate'],\n",
        "        'blockchain': ['blockchain certification', 'blockchain expert'],\n",
        "        'bachelor': ['bachelor', 'bachelor’s degree', 'bachelors degree', 'undergraduate degree']\n",
        "    }\n",
        "    found_certs = []\n",
        "    for cert, keywords in certifications.items():\n",
        "        for keyword in keywords:\n",
        "            if re.search(rf'\\b{keyword}\\b', text):\n",
        "                found_certs.append(cert)\n",
        "                break\n",
        "    return list(set(found_certs)) if found_certs else ['not_specified']\n",
        "\n",
        "def extract_skills(text):\n",
        "    \"\"\"Extract real estate skills from job descriptions\"\"\"\n",
        "    skills = [\n",
        "        'python', 'sql', 'java', 'c++', 'r', 'scala',\n",
        "        'machine learning', 'ai', 'artificial intelligence',\n",
        "        'blockchain', 'cryptocurrency', 'big data', 'hadoop', 'spark',\n",
        "        'data analysis', 'data science', 'statistics',\n",
        "        'risk management', 'fraud detection', 'quantitative analysis',\n",
        "        'cloud computing', 'aws', 'azure', 'google cloud',\n",
        "        'cybersecurity', 'information security',\n",
        "        'api', 'rest', 'microservices',\n",
        "        'agile', 'scrum', 'devops',\n",
        "        'financial modeling', 'valuation', 'accounting',\n",
        "        'regulatory compliance', 'gdpr', 'pci', 'kyc', 'aml'\n",
        "    ]\n",
        "    found_skills = []\n",
        "    for skill in skills:\n",
        "        if re.search(rf'\\b{skill}\\b', text):\n",
        "            found_skills.append(skill)\n",
        "    return found_skills\n",
        "\n",
        "def preprocess_text(text):\n",
        "    \"\"\"Preprocess text for clustering\"\"\"\n",
        "    if pd.isna(text):\n",
        "        return \"\"\n",
        "    words = word_tokenize(text.lower())\n",
        "    words = [word for word in words if word.isalpha() and word not in stop_words]\n",
        "    return \" \".join(words)\n",
        "\n",
        "def analyze_certifications(us_df, uk_df):\n",
        "    \"\"\"Analyze and compare certification requirements\"\"\"\n",
        "    us_df['certifications'] = us_df['requirement'].apply(extract_certifications)\n",
        "    uk_df['certifications'] = uk_df['requirement'].apply(extract_certifications)\n",
        "\n",
        "    us_certs = [cert for sublist in us_df['certifications'] for cert in sublist]\n",
        "    uk_certs = [cert for sublist in uk_df['certifications'] for cert in sublist]\n",
        "\n",
        "    us_cert_counts = pd.Series(us_certs).value_counts().reset_index()\n",
        "    uk_cert_counts = pd.Series(uk_certs).value_counts().reset_index()\n",
        "\n",
        "    us_cert_counts.columns = ['Certification', 'Count']\n",
        "    uk_cert_counts.columns = ['Certification', 'Count']\n",
        "    us_cert_counts['Country'] = 'US'\n",
        "    uk_cert_counts['Country'] = 'UK'\n",
        "\n",
        "    cert_counts = pd.concat([us_cert_counts, uk_cert_counts])\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    sns.barplot(x='Certification', y='Count', hue='Country', data=cert_counts)\n",
        "    plt.title('Certification Requirements: US vs. UK')\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('certification_comparison.png')\n",
        "    plt.show()\n",
        "\n",
        "    return us_certs, uk_certs\n",
        "\n",
        "def analyze_skills(us_df, uk_df):\n",
        "    \"\"\"Analyze and compare skills\"\"\"\n",
        "    us_df['skills'] = us_df['requirement'].apply(extract_skills)\n",
        "    uk_df['skills'] = uk_df['requirement'].apply(extract_skills)\n",
        "\n",
        "    us_skills = [skill for sublist in us_df['skills'] for skill in sublist]\n",
        "    uk_skills = [skill for sublist in uk_df['skills'] for skill in sublist]\n",
        "\n",
        "    us_skill_counts = Counter(us_skills).most_common(20)\n",
        "    uk_skill_counts = Counter(uk_skills).most_common(20)\n",
        "\n",
        "    us_skill_df = pd.DataFrame(us_skill_counts, columns=['Skill', 'Count'])\n",
        "    uk_skill_df = pd.DataFrame(uk_skill_counts, columns=['Skill', 'Count'])\n",
        "    us_skill_df['Country'] = 'US'\n",
        "    uk_skill_df['Country'] = 'UK'\n",
        "\n",
        "    top_skills = pd.concat([us_skill_df, uk_skill_df])\n",
        "\n",
        "    plt.figure(figsize=(12, 8))\n",
        "    sns.barplot(x='Count', y='Skill', hue='Country', data=top_skills)\n",
        "    plt.title('Top Fintech Skills: US vs. UK')\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('Top Fintech Skills: US vs. UK.png')\n",
        "    plt.show()\n",
        "\n",
        "    us_text = \" \".join(us_skills)\n",
        "    uk_text = \" \".join(uk_skills)\n",
        "\n",
        "    plt.figure(figsize=(15, 7))\n",
        "    plt.subplot(1, 2, 1)\n",
        "    plt.imshow(WordCloud(width=600, height=400, background_color='white').generate(us_text), interpolation='bilinear')\n",
        "    plt.title('US Fintech Skills')\n",
        "    plt.axis('off')\n",
        "\n",
        "    plt.subplot(1, 2, 2)\n",
        "    plt.imshow(WordCloud(width=600, height=400, background_color='white').generate(uk_text), interpolation='bilinear')\n",
        "    plt.title('UK Fintech Skills')\n",
        "    plt.axis('off')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('Wordcloud.png')\n",
        "    plt.show()\n",
        "\n",
        "    return us_skills, uk_skills\n",
        "\n",
        "def perform_clustering(us_df, uk_df):\n",
        "    \"\"\"Cluster real estate job requirements\"\"\"\n",
        "    combined_df = pd.concat([us_df, uk_df])\n",
        "    combined_df['processed_text'] = combined_df['requirement'].apply(preprocess_text)\n",
        "\n",
        "    vectorizer = TfidfVectorizer(max_features=1000, ngram_range=(1, 2))\n",
        "    X = vectorizer.fit_transform(combined_df['processed_text'])\n",
        "\n",
        "    distortions = []\n",
        "    for k in range(2, 10):\n",
        "        kmeans = KMeans(n_clusters=k, random_state=42)\n",
        "        kmeans.fit(X)\n",
        "        distortions.append(kmeans.inertia_)\n",
        "\n",
        "    plt.figure(figsize=(8, 5))\n",
        "    plt.plot(range(2, 10), distortions, 'bx-')\n",
        "    plt.xlabel('Number of clusters')\n",
        "    plt.ylabel('Distortion')\n",
        "    plt.title('Elbow Method for Optimal K')\n",
        "    plt.savefig('Elbow Method for Optimal K.png')\n",
        "    plt.show()\n",
        "\n",
        "    n_clusters = 4\n",
        "    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n",
        "    clusters = kmeans.fit_predict(X)\n",
        "    combined_df['cluster'] = clusters\n",
        "\n",
        "    pca = PCA(n_components=2)\n",
        "    reduced_features = pca.fit_transform(X.toarray())\n",
        "\n",
        "    plt.figure(figsize=(10, 8))\n",
        "    scatter = plt.scatter(reduced_features[:, 0], reduced_features[:, 1], c=clusters, cmap='viridis', alpha=0.6)\n",
        "    for i, country in enumerate(combined_df['country']):\n",
        "        plt.text(reduced_features[i, 0], reduced_features[i, 1], country[0].upper(), fontsize=8,\n",
        "                 color='red' if country == 'US' else 'blue')\n",
        "\n",
        "    plt.legend(*scatter.legend_elements(), title=\"Clusters\")\n",
        "    plt.title('Fintech Job Clusters (US vs. UK)')\n",
        "    plt.xlabel('PCA 1')\n",
        "    plt.ylabel('PCA 2')\n",
        "    plt.savefig('Fintech Job Clusters (US vs. UK).png')\n",
        "    plt.show()\n",
        "\n",
        "    combined_df['cluster_country'] = combined_df['cluster'].astype(str) + '_' + combined_df['country']\n",
        "\n",
        "    print(\"\\nTop terms per cluster:\")\n",
        "    terms = vectorizer.get_feature_names_out()\n",
        "    order_centroids = kmeans.cluster_centers_.argsort()[:, ::-1]\n",
        "\n",
        "    for i in range(n_clusters):\n",
        "        print(f\"\\nCluster {i}:\")\n",
        "        print(\"Countries:\", combined_df[combined_df['cluster'] == i]['country'].value_counts().to_string())\n",
        "        top_terms = [terms[ind] for ind in order_centroids[i, :10] if terms[ind] and str(terms[ind]).lower() != 'nan'or'nan nan']\n",
        "        print(\"Top terms:\", \", \".join(top_terms))\n",
        "\n",
        "    return combined_df\n",
        "\n",
        "def main():\n",
        "    us_file = '/content/us_fintech_cleaned.csv'\n",
        "    uk_file = '/content/uk_fintech_cleaned.csv'\n",
        "\n",
        "    try:\n",
        "        us_df = load_and_preprocess(us_file, 'US')\n",
        "        uk_df = load_and_preprocess(uk_file, 'UK')\n",
        "\n",
        "        print(\"Analyzing certification requirements...\")\n",
        "        us_certs, uk_certs = analyze_certifications(us_df, uk_df)\n",
        "\n",
        "        print(\"\\nAnalyzing required skills...\")\n",
        "        us_skills, uk_skills = analyze_skills(us_df, uk_df)\n",
        "\n",
        "        print(\"\\nPerforming clustering analysis...\")\n",
        "        clustered_df = perform_clustering(us_df, uk_df)\n",
        "\n",
        "        print(\"\\nAnalysis complete!\")\n",
        "    except Exception as e:\n",
        "        print(f\"An error occurred: {str(e)}\")\n",
        "        print(\"Please check your CSV files and dependencies.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}